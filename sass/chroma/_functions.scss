//
// Main module for Chroma.
//

// Import the global variables and internal functions needed by all of Chroma.
@import './variables';
@import './internals';

// Initialize the $chroma data structure.
$chroma: _chroma-init();


// is-dangerous-color-keyword($name)
//
// If a real Sass color is given as a color name to Chroma, it is in danger of
// being converted to a hexadecimal value before Chroma can read the name. And
// some hex values map to more than one keyword (e.g. gray and grey), so the
// original name would be irretrievable.
//
// Checks if the given name is one of those dangerous color keywords. Returns
// false or causes the Sass compilation to die with an error message containing
// the name of the ambiguous color keywords.
//
// $name - The name of the color to check.
//
// Style guide: functions.is-dangerous-color-keyword
@function is-dangerous-color-keyword($name) {
  $ambiguous-keywords: (
    'aqua': 'aqua or cyan',
    'cyan': 'aqua or cyan',
    'fuchsia': 'fuchsia or magenta',
    'magenta': 'fuchsia or magenta',
    'darkgray': 'darkgray or darkgrey',
    'darkgrey': 'darkgray or darkgrey',
    'darkslategray': 'darkslategray or darkslategrey',
    'darkslategrey': 'darkslategray or darkslategrey',
    'dimgray': 'dimgray or dimgrey',
    'dimgrey': 'dimgray or dimgrey',
    'gray': 'gray or grey',
    'grey': 'gray or grey',
    'lightgray': 'lightgray or lightgrey',
    'lightgrey': 'lightgray or lightgrey',
    'lightslategray': 'lightslategray or lightslategrey',
    'lightslategrey': 'lightslategray or lightslategrey',
    'slategray': 'slategray or slategrey',
    'slategrey': 'slategray or slategrey',
  );
  $converted-keywords: (
    '#00ffff': 'aqua or cyan',
    '#0ff': 'aqua or cyan',
    '#ff00ff': 'fuchsia or magenta',
    '#f0f': 'fuchsia or magenta',
    '#a9a9a9': 'darkgray or darkgrey',
    '#2f4f4f': 'darkslategray or darkslategrey',
    '#696969': 'dimgray or dimgrey',
    '#808080': 'gray or grey',
    '#d3d3d3': 'lightgray or lightgrey',
    '#778899': 'lightslategray or lightslategrey',
    '#789': 'lightslategray or lightslategrey',
    '#708090': 'slategray or slategrey',
  );

  @if type-of($name) == 'color' {
    // Convert the color to a string.
    $name: inspect($name);
    // Check if Sass will convert the color into a hex value that we can't
    // convert back to a keyword.
    @if map-has-key($ambiguous-keywords, $name) {
      @if $chroma-die-on-ambiguous-keyword {
        @error "Sass will convert #{$name} into a hexidecimal value when it uses the \"compressed\" output style and Chroma will not be able to determine if the original name was #{map-get($ambiguous-keywords, $name)}. To prevent this error, quote the keyword like this: '#{$name}'.";
      }
      @else {
        @return map-get($ambiguous-keywords, $name);
      }
    }
    // Check if Sass _has_ converted the color into a hex value that we can't
    // convert back to a keyword.
    @else if map-has-key($converted-keywords, $name) {
      @error "Sass has converted a color keyword into the hexidecimal value, #{$name}, and Chroma was not be able to determine if the original name was #{map-get($ambiguous-keywords, $name)}. To prevent this error, use quotes around the keyword.";
    }
  }
  @return false;
}

// is-color-keyword($name)
//
// Checks if the given name is a color keyword. Returns false or a string
// containing the name of the color keyword.
//
// $name - The name of the color to check.
//
// Style guide: functions.is-color-keyword
@function is-color-keyword($name) {
  // If a real Sass color is given, it is in danger of being converted to a
  // hexadecimal value before we can read the name. And some hex values map to
  // more than one keyword (e.g. gray and grey), so the original name would be
  // irretrievable.
  @if is-dangerous-color-keyword($name) {
    // If true, the is-dangerous-color-keyword() would @die before it returned.
  }

  // CSS4 color keyword are from
  // http://dev.w3.org/csswg/css-color-4/#named-colors
  $css4-color-keywords: (
    'aliceblue': 'aliceblue',
    '#f0f8ff': 'aliceblue',
    'antiquewhite': 'antiquewhite',
    '#faebd7': 'antiquewhite',
    'aqua': 'aqua',
    'aquamarine': 'aquamarine',
    '#7fffd4': 'aquamarine',
    'azure': 'azure',
    '#f0ffff': 'azure',
    'beige': 'beige',
    '#f5f5dc': 'beige',
    'bisque': 'bisque',
    '#ffe4c4': 'bisque',
    'black': 'black',
    '#000000': 'black',
    '#000': 'black',
    'blanchedalmond': 'blanchedalmond',
    '#ffebcd': 'blanchedalmond',
    'blue': 'blue',
    '#0000ff': 'blue',
    '#00f': 'blue',
    'blueviolet': 'blueviolet',
    '#8a2be2': 'blueviolet',
    'brown': 'brown',
    '#a52a2a': 'brown',
    'burlywood': 'burlywood',
    '#deb887': 'burlywood',
    'cadetblue': 'cadetblue',
    '#5f9ea0': 'cadetblue',
    'chartreuse': 'chartreuse',
    '#7fff00': 'chartreuse',
    'chocolate': 'chocolate',
    '#d2691e': 'chocolate',
    'coral': 'coral',
    '#ff7f50': 'coral',
    'cornflowerblue': 'cornflowerblue',
    '#6495ed': 'cornflowerblue',
    'cornsilk': 'cornsilk',
    '#fff8dc': 'cornsilk',
    'crimson': 'crimson',
    '#dc143c': 'crimson',
    'cyan': 'cyan',
    '#00ffff': 'cyan',
    '#0ff': 'cyan',
    'darkblue': 'darkblue',
    '#00008b': 'darkblue',
    'darkcyan': 'darkcyan',
    '#008b8b': 'darkcyan',
    'darkgoldenrod': 'darkgoldenrod',
    '#b8860b': 'darkgoldenrod',
    'darkgray': 'darkgray',
    '#a9a9a9': 'darkgray',
    'darkgreen': 'darkgreen',
    '#006400': 'darkgreen',
    'darkgrey': 'darkgrey',
    'darkkhaki': 'darkkhaki',
    '#bdb76b': 'darkkhaki',
    'darkmagenta': 'darkmagenta',
    '#8b008b': 'darkmagenta',
    'darkolivegreen': 'darkolivegreen',
    '#556b2f': 'darkolivegreen',
    'darkorange': 'darkorange',
    '#ff8c00': 'darkorange',
    'darkorchid': 'darkorchid',
    '#9932cc': 'darkorchid',
    'darkred': 'darkred',
    '#8b0000': 'darkred',
    'darksalmon': 'darksalmon',
    '#e9967a': 'darksalmon',
    'darkseagreen': 'darkseagreen',
    '#8fbc8f': 'darkseagreen',
    'darkslateblue': 'darkslateblue',
    '#483d8b': 'darkslateblue',
    'darkslategray': 'darkslategray',
    '#2f4f4f': 'darkslategray',
    'darkslategrey': 'darkslategrey',
    'darkturquoise': 'darkturquoise',
    '#00ced1': 'darkturquoise',
    'darkviolet': 'darkviolet',
    '#9400d3': 'darkviolet',
    'deeppink': 'deeppink',
    '#ff1493': 'deeppink',
    'deepskyblue': 'deepskyblue',
    '#00bfff': 'deepskyblue',
    'dimgray': 'dimgray',
    '#696969': 'dimgray',
    'dimgrey': 'dimgrey',
    'dodgerblue': 'dodgerblue',
    '#1e90ff': 'dodgerblue',
    'firebrick': 'firebrick',
    '#b22222': 'firebrick',
    'floralwhite': 'floralwhite',
    '#fffaf0': 'floralwhite',
    'forestgreen': 'forestgreen',
    '#228b22': 'forestgreen',
    'fuchsia': 'fuchsia',
    'gainsboro': 'gainsboro',
    '#dcdcdc': 'gainsboro',
    'ghostwhite': 'ghostwhite',
    '#f8f8ff': 'ghostwhite',
    'gold': 'gold',
    '#ffd700': 'gold',
    'goldenrod': 'goldenrod',
    '#daa520': 'goldenrod',
    'gray': 'gray',
    '#808080': 'gray',
    'green': 'green',
    '#008000': 'green',
    'greenyellow': 'greenyellow',
    '#adff2f': 'greenyellow',
    'grey': 'grey',
    'honeydew': 'honeydew',
    '#f0fff0': 'honeydew',
    'hotpink': 'hotpink',
    '#ff69b4': 'hotpink',
    'indianred': 'indianred',
    '#cd5c5c': 'indianred',
    'indigo': 'indigo',
    '#4b0082': 'indigo',
    'ivory': 'ivory',
    '#fffff0': 'ivory',
    'khaki': 'khaki',
    '#f0e68c': 'khaki',
    'lavender': 'lavender',
    '#e6e6fa': 'lavender',
    'lavenderblush': 'lavenderblush',
    '#fff0f5': 'lavenderblush',
    'lawngreen': 'lawngreen',
    '#7cfc00': 'lawngreen',
    'lemonchiffon': 'lemonchiffon',
    '#fffacd': 'lemonchiffon',
    'lightblue': 'lightblue',
    '#add8e6': 'lightblue',
    'lightcoral': 'lightcoral',
    '#f08080': 'lightcoral',
    'lightcyan': 'lightcyan',
    '#e0ffff': 'lightcyan',
    'lightgoldenrodyellow': 'lightgoldenrodyellow',
    '#fafad2': 'lightgoldenrodyellow',
    'lightgray': 'lightgray',
    '#d3d3d3': 'lightgray',
    'lightgreen': 'lightgreen',
    '#90ee90': 'lightgreen',
    'lightgrey': 'lightgrey',
    'lightpink': 'lightpink',
    '#ffb6c1': 'lightpink',
    'lightsalmon': 'lightsalmon',
    '#ffa07a': 'lightsalmon',
    'lightseagreen': 'lightseagreen',
    '#20b2aa': 'lightseagreen',
    'lightskyblue': 'lightskyblue',
    '#87cefa': 'lightskyblue',
    'lightslategray': 'lightslategray',
    '#778899': 'lightslategray',
    '#789': 'lightslategray',
    'lightslategrey': 'lightslategrey',
    'lightsteelblue': 'lightsteelblue',
    '#b0c4de': 'lightsteelblue',
    'lightyellow': 'lightyellow',
    '#ffffe0': 'lightyellow',
    'lime': 'lime',
    '#00ff00': 'lime',
    '#0f0': 'lime',
    'limegreen': 'limegreen',
    '#32cd32': 'limegreen',
    'linen': 'linen',
    '#faf0e6': 'linen',
    'magenta': 'magenta',
    '#ff00ff': 'magenta',
    '#f0f': 'magenta',
    'maroon': 'maroon',
    '#800000': 'maroon',
    'mediumaquamarine': 'mediumaquamarine',
    '#66cdaa': 'mediumaquamarine',
    'mediumblue': 'mediumblue',
    '#0000cd': 'mediumblue',
    'mediumorchid': 'mediumorchid',
    '#ba55d3': 'mediumorchid',
    'mediumpurple': 'mediumpurple',
    '#9370db': 'mediumpurple',
    'mediumseagreen': 'mediumseagreen',
    '#3cb371': 'mediumseagreen',
    'mediumslateblue': 'mediumslateblue',
    '#7b68ee': 'mediumslateblue',
    'mediumspringgreen': 'mediumspringgreen',
    '#00fa9a': 'mediumspringgreen',
    'mediumturquoise': 'mediumturquoise',
    '#48d1cc': 'mediumturquoise',
    'mediumvioletred': 'mediumvioletred',
    '#c71585': 'mediumvioletred',
    'midnightblue': 'midnightblue',
    '#191970': 'midnightblue',
    'mintcream': 'mintcream',
    '#f5fffa': 'mintcream',
    'mistyrose': 'mistyrose',
    '#ffe4e1': 'mistyrose',
    'moccasin': 'moccasin',
    '#ffe4b5': 'moccasin',
    'navajowhite': 'navajowhite',
    '#ffdead': 'navajowhite',
    'navy': 'navy',
    '#000080': 'navy',
    'oldlace': 'oldlace',
    '#fdf5e6': 'oldlace',
    'olive': 'olive',
    '#808000': 'olive',
    'olivedrab': 'olivedrab',
    '#6b8e23': 'olivedrab',
    'orange': 'orange',
    '#ffa500': 'orange',
    'orangered': 'orangered',
    '#ff4500': 'orangered',
    'orchid': 'orchid',
    '#da70d6': 'orchid',
    'palegoldenrod': 'palegoldenrod',
    '#eee8aa': 'palegoldenrod',
    'palegreen': 'palegreen',
    '#98fb98': 'palegreen',
    'paleturquoise': 'paleturquoise',
    '#afeeee': 'paleturquoise',
    'palevioletred': 'palevioletred',
    '#db7093': 'palevioletred',
    'papayawhip': 'papayawhip',
    '#ffefd5': 'papayawhip',
    'peachpuff': 'peachpuff',
    '#ffdab9': 'peachpuff',
    'peru': 'peru',
    '#cd853f': 'peru',
    'pink': 'pink',
    '#ffc0cb': 'pink',
    'plum': 'plum',
    '#dda0dd': 'plum',
    'powderblue': 'powderblue',
    '#b0e0e6': 'powderblue',
    'purple': 'purple',
    '#800080': 'purple',
    'rebeccapurple': 'rebeccapurple',
    '#663399': 'rebeccapurple',
    'red': 'red',
    '#ff0000': 'red',
    '#f00': 'red',
    'rosybrown': 'rosybrown',
    '#bc8f8f': 'rosybrown',
    'royalblue': 'royalblue',
    '#4169e1': 'royalblue',
    'saddlebrown': 'saddlebrown',
    '#8b4513': 'saddlebrown',
    'salmon': 'salmon',
    '#fa8072': 'salmon',
    'sandybrown': 'sandybrown',
    '#f4a460': 'sandybrown',
    'seagreen': 'seagreen',
    '#2e8b57': 'seagreen',
    'seashell': 'seashell',
    '#fff5ee': 'seashell',
    'sienna': 'sienna',
    '#a0522d': 'sienna',
    'silver': 'silver',
    '#c0c0c0': 'silver',
    'skyblue': 'skyblue',
    '#87ceeb': 'skyblue',
    'slateblue': 'slateblue',
    '#6a5acd': 'slateblue',
    'slategray': 'slategray',
    '#708090': 'slategray',
    'slategrey': 'slategrey',
    'snow': 'snow',
    '#fffafa': 'snow',
    'springgreen': 'springgreen',
    '#00ff7f': 'springgreen',
    'steelblue': 'steelblue',
    '#4682b4': 'steelblue',
    'tan': 'tan',
    '#d2b48c': 'tan',
    'teal': 'teal',
    '#008080': 'teal',
    'thistle': 'thistle',
    '#d8bfd8': 'thistle',
    'tomato': 'tomato',
    '#ff6347': 'tomato',
    'turquoise': 'turquoise',
    '#40e0d0': 'turquoise',
    'violet': 'violet',
    '#ee82ee': 'violet',
    'wheat': 'wheat',
    '#f5deb3': 'wheat',
    'white': 'white',
    '#ffffff': 'white',
    '#fff': 'white',
    'whitesmoke': 'whitesmoke',
    '#f5f5f5': 'whitesmoke',
    'yellow': 'yellow',
    '#ffff00': 'yellow',
    '#ff0': 'yellow',
    'yellowgreen': 'yellowgreen',
    '#9acd32': 'yellowgreen',
  );

  // Convert the color to a string.
  $name: inspect($name);

  @return if(map-has-key($css4-color-keywords, $name), map-get($css4-color-keywords, $name), false);
}

// chroma-to-string($name)
//
// Cast the color name to a string to ensure color keywords do not cause
// problems as map keys.
//
// $name - The name of the color to convert.
//
// Style guide: functions.chroma-to-string
@function chroma-to-string($name) {
  // If the name is a color keyword, convert it to a string.
  $is-keyword: is-color-keyword($name);
  @return if($is-keyword, $is-keyword, inspect($name));
}

// color([$scheme,] $name)
//
// Returns a color value given a key word and optional color scheme. If the
// named color is not in the color scheme, the color scheme's parent scheme will
// be searched.
//
// Usage:
// ```scss
// .ex {
//   background-color: color(body-bg);
//   border: 1px solid color(grace, border);
// }
// ```
//
// $scheme - Optional color scheme to choose from; defaults to
//           `$chroma-active-scheme`.
// $name   - The name of the requested color.
//
// Style guide: functions.color
@function color($scheme, $name: null) {
  @if type-of($name) == 'null' {
    // The shortcut syntax was used since $name is null. Move the color name to
    // the $name parameter and set a default value to $scheme.
    $name: $scheme;
    $scheme: $chroma-active-scheme;
  }

  // Confirm the scheme exists.
  @if not chroma-has-scheme($scheme) {
    @error 'The #{$chroma-spelling} scheme "#{$scheme}" was not found.';
  }
  // Cast the color name to a string to ensure color keywords do not cause
  // problems as map keys.
  $name: chroma-to-string($name);
  // Find the actual scheme used by the named color.
  $actual-scheme: chroma-has-color($name, $scheme);
  @if not $actual-scheme {
    @error 'The #{$chroma-spelling} "#{$name}" was not found.';
  }
  @return map-get(map-get(map-get($chroma, 'names'), "#{$actual-scheme}::#{$name}"), 'value');
}

// define-color-scheme($scheme [, $description] [, $parent])
//
// Define a new color scheme and, optionally, set its description and parent
// color scheme.
//
// When searching for a color and the color scheme does not define that
// particular color, the parent color scheme will be checked to see if it
// defines that color.
//
// By default, all color schemes inherit their colors from the default color
// scheme. Optionally, a color scheme can choose to inherit from a different
// color scheme by specifying the `$parent` parameter.
//
// Usage:
// ```scss
// $chroma: define-color-scheme(taiwan, "Taiwan's colors");
// $chroma: define-color-scheme(taipei, "Taipei's colors", $parent: taiwan);
// ```
//
// $scheme      - The name of the new color scheme.
// $description - Optional description of the color scheme.
// $parent      - The parent color scheme to inherit colors from; defaults to
//                `default` (i.e. `$CHROMA_DEFAULT_SCHEME`).
//
// Style guide: functions.define-color-scheme
@function define-color-scheme($scheme, $description: '', $parent: $CHROMA_DEFAULT_SCHEME) {
  // Check if we are defining the default color scheme.
  @if $scheme == $CHROMA_DEFAULT_SCHEME {
    $parent: false;
  }

  // Check parent reference exists.
  @if $parent and not chroma-has-scheme($parent) {
    @error 'Cannot set the parent of #{scheme} to "#{$parent}" because the #{$chroma-spelling} scheme "#{$parent}" was not found.';
  }

  $schemes: map-merge(
    map-get($chroma, 'schemes'),
    ($scheme: (
      'description': $description,
      'parent': $parent,
    ))
  );

  @return map-merge(
    $chroma,
    ('schemes': $schemes)
  );
}

// define-default-color-scheme($description)
//
// Sets the description of the default color scheme.
//
// Usage:
// ```scss
// $chroma: define-default-color-scheme('Default colors');
// ```
//
// $description - Description of the default color scheme.
//
// Style guide: functions.define-default-color-scheme
@function define-default-color-scheme($description) {
  @return define-color-scheme($CHROMA_DEFAULT_SCHEME, $description);
}

// add-colors([$scheme,] $colors)
//
// Add the colors to an existing color scheme.
//
// Usage:
// ```scss
// $my-colors: add-colors('admiral', (
//  nav:             'link',
//  nav-visited:     color(link-visited),
//  nav-focus:       color(link-focus),
// ));
// ```
//
// If you wish to add colors to the active scheme, you can just use:
// ```scss
// $my-colors: add-colors((
//  nav:             'link',
//  nav-visited:     color(link-visited),
//  nav-focus:       color(link-focus),
// ));
// ```
//
// $scheme - Optional: color scheme to add colors to; defaults to
//           `$chroma-active-scheme`.
// $colors - A Sass map containing the new colors.
//
// Style guide: functions.add-colors
@function add-colors($scheme, $colors: null) {
  @if type-of($scheme) == 'map' or type-of($scheme) == 'list' {
    // The shortcut syntax was used since only a map of $colors was given as the
    // first parameter. Move the map to the $colors parameter and set a default
    // value to $scheme.
    $colors: $scheme;
    $scheme: $chroma-active-scheme;
  }
  @if not chroma-has-scheme($scheme) {
    @error 'The #{$chroma-spelling} scheme "#{$scheme}" was not found.';
  }
  @each $color-name, $color-value in $colors {
    // Cast the color name to a string to ensure color keywords do not cause
    // problems as map keys.
    $color-name: chroma-to-string($color-name);
    // If the value given is a color, just add it.
    @if type_of($color-value) == 'color' {
      $chroma: _chroma-add-name($scheme, $color-name,
        $value          : $color-value,
        $reference      : false,
        $referenced_by  : ()
      ) !global;
    }
    // If the value given is a reference to another color...
    @else if type_of($color-value) == 'string' {
      $ref: $color-value;
      // Find the referenced color.
      $scheme-of-reference: chroma-has-color($ref, $scheme);
      @if not $scheme-of-reference {
        @error 'The #{$chroma-spelling} "#{$ref}" was not found.';
      }
      $referenced-color: map-get(map-get($chroma, 'names'), "#{$scheme-of-reference}::#{$ref}");
      // Add the new color.
      $chroma: _chroma-add-name($scheme, $color-name,
        $value         : map-get($referenced-color, 'value'),
        $reference     : $ref,
        $referenced_by : ()
      ) !global;
      // Document the new color in all the referenced_by lists.
      @while $ref {
        $chroma: _chroma-add-name($scheme-of-reference, $ref,
          $value         : map-get($referenced-color, 'value'),
          $reference     : map-get($referenced-color, 'reference'),
          $referenced_by : append(
            map-get($referenced-color, 'referenced_by'),
            $color-name
          )
        ) !global;
        $ref: map-get($referenced-color, 'reference');
        @if $ref {
          $scheme-of-reference: chroma-has-color($ref, $scheme-of-reference);
          $referenced-color: map-get(map-get($chroma, 'names'), "#{$scheme-of-reference}::#{$ref}");
        }
      }
    }
    @else {
      @error 'Unexpected value given for color "#{$color-name}".';
    }
  }

  @return $chroma;
}
