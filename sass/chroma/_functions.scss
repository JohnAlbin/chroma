// Functions module
//
// The main module for Chroma.
//
// Weight: -1
//
// Style guide: functions

// Import the global variables and internal functions needed by all of Chroma.
@import './variables';
@import './internals';

// Initialize the $chroma data structure.
$chroma: _chroma-init();


// is-dangerous-color-keyword($name)
//
// This function is used by color(), add-colors() and others to check if the
// given color name is a "dangerous" color keyword. Returns false or causes the
// Sass compilation to die with an error message containing the name of the
// dangerous color keyword.
//
// If a real Sass color is given as a color name to Chroma, it is in danger of
// being converted to a hexadecimal value before Chroma can read the name. (This
// happens when Sass' "compressed" output style is used.) And some hex values
// map to more than one keyword (e.g. gray/grey and fuchsia/magenta), so the
// original name would be irretrievable.
//
// Since Chroma will confuse fuchsia and magenta (among others) under Sass'
// "compressed" output style, it would generate confusing results. To prevent
// this, Chroma halts Sass compilation when it detects an ambiguous color
// keyword. While the error only occurs under Sass' "compressed" output style,
// Chroma halts under all output styles. Otherwise, Chroma could behave
// differently on production vs. development environments. If you are really
// sure Chroma will never be run with Sass' "compressed" output style, you can
// disable this feature by setting `$chroma-die-on-dangerous-keyword: false;`.
//
// $name - The name of the color to check.
//
// Style guide: functions.is-dangerous-color-keyword
@function is-dangerous-color-keyword($name) {
  // First, double-check if this is a keyword in a string.
  @if _is-keyword-string($name) {
    @return false;
  }

  @if type-of($name) == 'color' {
    $lookup: '';
    @if _is-old-libsass() {
      // Forcibly convert a color keyword into a string with a "salt".
      $lookup: "keyword:#{$name}";
    }
    @else {
      // Convert the color to a string.
      $lookup: inspect($name);
    }
    // Check if Sass will convert the color into a hex value that we can't
    // convert back to a keyword.
    @if map-has-key($_chroma-dangerous-keywords, $lookup) {
      @if $chroma-die-on-dangerous-keyword {
        @error "Sass will convert #{$name} into a hexidecimal value when it uses the \"compressed\" output style and Chroma will not be able to determine if the original name was #{map-get($_chroma-dangerous-keywords, $lookup)}. To prevent this error, quote the keyword like this: '#{$name}'.";
      }
      @else {
        @return map-get($_chroma-dangerous-keywords, $lookup);
      }
    }
    // Check if Sass _has_ converted the color into a hex value that we can't
    // convert back to a keyword.
    @else if map-has-key($_chroma-dangerous-converted-keywords, $lookup) {
      @error "Sass has converted a #{$_chroma-spelling} keyword into the hexidecimal value, #{$name}, and Chroma was not be able to determine if the original name was #{map-get($_chroma-dangerous-converted-keywords, $lookup)}. To prevent this error, use quotes around the keyword.";
    }
  }
  @return false;
}

// is-color-keyword($name)
//
// Checks if the given name is a color keyword. Returns false or a string
// containing the name of the color keyword.
//
// $name - The name of the color to check.
//
// Style guide: functions.is-color-keyword
@function is-color-keyword($name) {
  // First, double-check if this is a keyword in a string.
  @if _is-keyword-string($name) {
    @return false;
  }

  // If a real Sass color is given, it is in danger of being converted to a
  // hexadecimal value before we can read the name. And some hex values map to
  // more than one keyword (e.g. gray and grey), so the original name would be
  // irretrievable.
  //
  // While is-dangerous-color-keyword() would normally @error before it
  // returned, if it does return a true value, we should continue inspecting
  // $name so we can convert it to a string.
  $is-dangerous: is-dangerous-color-keyword($name);

  @if type-of($name) == 'color' {
    $lookup: '';

    @if _is-old-libsass() {
      // Forcibly convert a color keyword into a string with a "salt".
      $lookup: "keyword:#{$name}";
    }
    @else {
      // Convert the color to a string.
      $lookup: inspect($name);
    }

    @return if(map-has-key($_chroma-css4-color-keywords, $lookup), map-get($_chroma-css4-color-keywords, $lookup), false);
  }

  @return false;
}

// chroma-to-string($name)
//
// Cast the color name to a string to ensure color keywords do not cause
// problems as map keys.
//
// $name - The name of the color to convert.
//
// Style guide: functions.chroma-to-string
@function chroma-to-string($name) {
  // If the name is a color keyword, is-color-keyword() converts it to a string.
  $is-keyword: is-color-keyword($name);
  @return if($is-keyword, $is-keyword, $name);
}

// color([$scheme,] $name)
//
// Returns a color value given a key word and optional color scheme. If the
// named color is not in the color scheme, the color scheme's parent scheme will
// be searched.
//
// Usage:
// ```scss
// .ex {
//   background-color: color(body-bg);
//   border: 1px solid color(grace, border);
// }
// ```
//
// $scheme - Optional color scheme to choose from; defaults to
//           `$chroma-active-scheme`.
// $name   - The name of the requested color.
//
// Style guide: functions.color
@function color($scheme, $name: null) {
  @if type-of($name) == 'null' {
    // The shortcut syntax was used since $name is null. Move the color name to
    // the $name parameter and set a default value to $scheme.
    $name: $scheme;
    $scheme: $chroma-active-scheme;
  }

  // Confirm the scheme exists.
  @if not chroma-has-scheme($scheme) {
    @error 'The #{$_chroma-spelling} scheme "#{$scheme}" was not found.';
  }
  // Cast the color name to a string to ensure color keywords do not cause
  // problems as map keys.
  $name: chroma-to-string($name);
  // Find the actual scheme used by the named color.
  $actual-scheme: chroma-has-color($name, $scheme);
  @if not $actual-scheme {
    @error 'The #{$_chroma-spelling} "#{$name}" was not found.';
  }
  $color: map-get(map-get($chroma, 'names'), "#{$actual-scheme}::#{$name}");
  @if $actual-scheme == $scheme {
    @return map-get($color, 'value');
  }
  @else {
    // The value of $actual-scheme::$name is based on colors in $actual-scheme
    // and its parent schemes. But one or more of the parent colors may be
    // defined (overridden) in $scheme too, so we need to check the full
    // reference chain.
    $chain: ();
    $ref: map-get($color, 'reference');
    @if $ref and map-get($color, 'function') {
      $chain: append($chain, $color);
    }
    @while $ref {
      $actual-scheme: chroma-has-color($ref, $scheme);
      $color: map-get(map-get($chroma, 'names'), "#{$actual-scheme}::#{$ref}");
      $ref: map-get($color, 'reference');
      // Save any color that has a function unless it is the final color in the
      // reference chain.
      @if $ref and map-get($color, 'function') {
        $chain: append($chain, $color);
      }
    }
    // Find the value for the last non-reference in the chain.
    $value: map-get($color, 'value');
    // If the reference chain contains functions, we need to recalculate all
    // the values back up the chain.
    @if length($chain) > 0 {
      @for $i from length($chain) through 1 {
        $function: map-get(nth($chain, $i), 'function');
        $parameters: map-get(nth($chain, $i), 'parameters');
        $parameters: set-nth($parameters, 1, $value);
        $value: _safe-call($function, $parameters...);
      }
    }
    @return $value;
  }
}

// define-color-scheme($scheme [, $description] [, $parent])
//
// Define a new color scheme and, optionally, set its description and parent
// color scheme.
//
// When searching for a color and the color scheme does not define that
// particular color, the parent color scheme will be checked to see if it
// defines that color.
//
// By default, all color schemes inherit their colors from the default color
// scheme. Optionally, a color scheme can choose to inherit from a different
// color scheme by specifying the `$parent` parameter.
//
// Usage:
// ```scss
// $chroma: define-color-scheme(taiwan, "Taiwan's colors");
// $chroma: define-color-scheme(taipei, "Taipei's colors", $parent: taiwan);
// ```
//
// $scheme      - The name of the new color scheme.
// $description - Optional description of the color scheme.
// $parent      - The parent color scheme to inherit colors from; defaults to
//                `default` (i.e. `$CHROMA_DEFAULT_SCHEME`).
//
// Style guide: functions.define-color-scheme
@function define-color-scheme($scheme, $description: '', $parent: $CHROMA_DEFAULT_SCHEME) {
  // Check if we are defining the default color scheme.
  @if $scheme == $CHROMA_DEFAULT_SCHEME {
    $parent: false;
  }

  // Check parent reference exists.
  @if $parent and not chroma-has-scheme($parent) {
    @error 'Cannot set the parent of #{scheme} to "#{$parent}" because the #{$_chroma-spelling} scheme "#{$parent}" was not found.';
  }

  $schemes: map-merge(
    map-get($chroma, 'schemes'),
    ($scheme: (
      'description': $description,
      'parent': $parent,
    ))
  );

  $chroma: map-merge(
    $chroma,
    ('schemes': $schemes)
  ) !global;

  @return $chroma;
}

// define-default-color-scheme([$name,] $description)
//
// Sets the description of the default color scheme.
//
// Usage:
// ```scss
// $chroma: define-default-color-scheme('Default colors');
// // or:
// $chroma: define-default-color-scheme('branding', 'Basic branding colors');
// ```
//
// $name - Optional: default color scheme name; defaults to `default`.
// $description - Description of the default color scheme.
//
// Style guide: functions.define-default-color-scheme
@function define-default-color-scheme($name, $description: null) {
  @if type-of($description) == 'null' {
    // The shortcut syntax was used since $description is null. Move the actual
    // description to the $description parameter.
    $description: $name;
    @return define-color-scheme($CHROMA_DEFAULT_SCHEME, $description);
  }

  // Remove the old default.
  $schemes: map-remove(map-get($chroma, 'schemes'), $CHROMA_DEFAULT_SCHEME);
  // Update all child schemes of the default.
  @each $scheme-name, $map in $schemes {
    @if map-get($map, 'parent') == $CHROMA_DEFAULT_SCHEME {
      $schemes: map-merge(
        $schemes,
        ($scheme-name: (
          'description': map-get($map, 'description'),
          'parent': $name,
        ))
      );
    }
  }
  // Set the new default scheme name and, if needed, the new active scheme.
  @if $chroma-active-scheme == $CHROMA_DEFAULT_SCHEME {
    $chroma-active-scheme: $name !global;
  }
  $CHROMA_DEFAULT_SCHEME: $name !global;
  // Add the default scheme (and the updated schemes) back into $chroma.
  $chroma: map-merge(
    $chroma,
    ('schemes': map-merge(
      $schemes,
      ($name: (
        'description': $description,
        'parent': false,
      ))
    ))
  ) !global;

  @return $chroma;
}

// add-colors([$scheme,] $colors)
//
// Add the colors to an existing color scheme.
//
// Usage:
// ```scss
// $chroma: add-colors('admiral', (
//  link:        #0000cc,
//  nav:         link, // Sets this color to the same value as the "link" color.
//  nav-visited: (nav darken 20%), // Takes the "nav" color and passes it
//                                 // through darken([color], 20%)
//  nav-focus:   (nav lighten 10%),
// ));
// ```
//
// If you wish to add colors to the active scheme, you can just use:
// ```scss
// $chroma: add-colors((
//  link:        #0000cc,
//  nav:         link,
//  nav-visited: (link darken 20%),
//  nav-focus:   (link lighten 10%),
// ));
// ```
//
// $scheme - Optional: color scheme to add colors to; defaults to
//           `$chroma-active-scheme`.
// $colors - A Sass map containing the new colors.
//
// Style guide: functions.add-colors
@function add-colors($scheme, $colors: null) {
  @if type-of($scheme) == 'map' or type-of($scheme) == 'list' {
    // The shortcut syntax was used since only a map of $colors was given as the
    // first parameter. Move the map to the $colors parameter and set a default
    // value to $scheme.
    $colors: $scheme;
    $scheme: $chroma-active-scheme;
  }
  @if not chroma-has-scheme($scheme) {
    @error 'The #{$_chroma-spelling} scheme "#{$scheme}" was not found.';
  }
  @each $color-name, $color-value in $colors {
    // Cast the color name to a string to ensure color keywords do not cause
    // problems as map keys.
    $color-name: chroma-to-string($color-name);
    $color-function: false;
    $color-parameters: ();
    // If the "value" is a list, its a value plus a function.
    @if type-of($color-value) == 'list' {
      $color-function: nth($color-value, 2);
      @if not function_exists($color-function) {
        @error 'The function "#{$color-function}" was not found when adding the #{$_chroma-spelling} "#{$color-name}".';
      }
      // Include the color value in the list of function parameters.
      @for $i from 1 through length($color-value) {
        @if $i != 2 {
          $color-parameters: append($color-parameters, nth($color-value, $i));
        }
      }
      $color-value: nth($color-value, 1);
    }
    // If the value given is a color, just add it.
    @if type-of($color-value) == 'color' and not (_is-old-libsass() and _is-keyword-string($color-value)) {
      @if $color-function {
        $color-value: _safe-call($color-function, $color-parameters...);
      }
      $chroma: _chroma-add-name($scheme, $color-name,
        $value          : $color-value,
        $reference      : false,
        $referenced_by  : (),
        $function       : $color-function,
        $parameters     : $color-parameters
      ) !global;
    }
    // If the value given is a reference to another color...
    @else if type-of($color-value) == 'string' or (_is-old-libsass() and _is-keyword-string($color-value)) {
      $ref: $color-value;
      // Find the referenced color.
      $scheme-of-reference: chroma-has-color($ref, $scheme);
      @if not $scheme-of-reference {
        @error 'The #{$_chroma-spelling} "#{$ref}" was not found when adding the #{$_chroma-spelling} "#{$color-name}".';
      }
      $referenced-color: map-get(map-get($chroma, 'names'), "#{$scheme-of-reference}::#{$ref}");
      // Add the new color.
      $new-value: map-get($referenced-color, 'value');
      @if $color-function {
        $color-parameters: set-nth($color-parameters, 1, $new-value);
        $new-value: _safe-call($color-function, $color-parameters...);
      }
      $chroma: _chroma-add-name($scheme, $color-name,
        $value         : $new-value,
        $reference     : $ref,
        $referenced_by : (),
        $function      : $color-function,
        $parameters    : $color-parameters
      ) !global;
      // Document the new color in all the referenced_by lists.
      @while $ref {
        $chroma: _chroma-add-name($scheme-of-reference, $ref,
          $value         : map-get($referenced-color, 'value'),
          $reference     : map-get($referenced-color, 'reference'),
          $referenced_by : append(
            map-get($referenced-color, 'referenced_by'),
            $color-name
          ),
          $function      : map-get($referenced-color, 'function'),
          $parameters    : map-get($referenced-color, 'parameters')
        ) !global;
        $ref: map-get($referenced-color, 'reference');
        @if $ref {
          $scheme-of-reference: chroma-has-color($ref, $scheme);
          $referenced-color: map-get(map-get($chroma, 'names'), "#{$scheme-of-reference}::#{$ref}");
        }
      }
    }
    @else {
      @error 'Unexpected value, "#{$color-value}", given for #{$_chroma-spelling} "#{$color-name}".';
    }
  }

  @return $chroma;
}

// define-skins($skins)
//
// Defines one or more color schemes as being a skin. For each of the specified
// color schemes, `define-skins()` will tell Chroma to use the scheme with the
// corresponding CSS selector when the `skin()` mixin is used.
//
// Usage:
// ```scss
// $chroma: define-skins((
//   'scheme1': '.is-scheme1-skin',
//   'scheme2': '.is-scheme2-skin',
//   'scheme3': 'html > body.this-works-but-is.way.too.specific.IMHO',
// ));
// ```
//
// $skins - A map of color schemes and their CSS parent selectors. Each key in
// the map must be the name of an existing color scheme. The value of each key
// is the CSS parent selector that triggers the use of the defined scheme
// instead of the default color scheme. We recommend using a simple CSS selector
// like `.is-CUSTOMNAME-skin`.
//
// Style guide: skin.define-skins
@function define-skins($skins) {
  @each $scheme, $selector in $skins {
    @if not chroma-has-scheme($scheme) {
      @error 'The #{$_chroma-spelling} scheme "#{$scheme}" was not found.';
    }
    @if type-of($selector) != 'string' {
      @error 'The selector for the #{$scheme} skin was a #{type-of($selector)}, but should be a string.';
    }
  }

  $chroma: map-merge(
    $chroma,
    ('skins': map-merge(
      map-get($chroma, 'skins'),
      $skins
    ))
  ) !global;

  @return $chroma;
}

// define-skin($scheme, $selector)
//
// Deprecated: Will be removed in Chroma 2.0.0. Use `define-skins()` instead.
//
// Weight: 100
//
// Style guide: skin.define-skin
@function define-skin($scheme, $selector) {
  @warn "The define-skin() function is deprecated. Use define-skins() instead.";
  @return define-skins(($scheme: $selector));
}
